{"version":3,"sources":["Constants/TimezonesConstant.js","App.js","reportWebVitals.js","index.js"],"names":["TIMEZONES","label","value","useStyles","makeStyles","theme","root","display","justifyContent","alignItems","heroContent","padding","spacing","alignCenter","textAlign","flexAlignCenter","formControl","minWidth","color","redFont","blueFont","App","useState","selectedTimezone","setSelectedTimezone","dateTimeAsPerSelectedTimezone","setDateTimeAsPerSelectedTimezone","Date","now","currentDateTS","setCurrentDateTS","classes","datetimeElementRef","useRef","useEffect","timestamp","timezone","dt","momentTimezone","tz","format","annotation","current","annotationTypes","randomAnnotationType","Math","floor","random","length","annotate","type","show","remove","CssBaseline","className","Container","maxWidth","Typography","component","variant","align","gutterBottom","paragraph","Grid","container","item","xs","sm","md","FormControl","InputLabel","id","Select","labelId","name","onChange","e","target","MenuItem","disabled","map","t","Card","CardContent","toLocaleString","CardActions","Button","size","onClick","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0WAGaA,EAAY,CACrB,CACIC,MAAO,2CACPC,MAAO,cAEX,CACID,MAAO,4CACPC,MAAO,cAEX,CACID,MAAO,qBACPC,MAAO,oBAEX,CACID,MAAO,qBACPC,MAAO,qBAEX,CACID,MAAO,8BACPC,MAAO,wBAEX,CACID,MAAO,2CACPC,MAAO,uBAEX,CACID,MAAO,0CACPC,MAAO,qBAEX,CACID,MAAO,sBACPC,MAAO,mBAEX,CACID,MAAO,4CACPC,MAAO,kBAEX,CACID,MAAO,8BACPC,MAAO,qBAEX,CACID,MAAO,2CACPC,MAAO,mBAEX,CACID,MAAO,2BACPC,MAAO,kBAEX,CACID,MAAO,iDACPC,MAAO,uBAEX,CACID,MAAO,kCACPC,MAAO,kBAEX,CACID,MAAO,6BACPC,MAAO,gCAEX,CACID,MAAO,2CACPC,MAAO,oBAEX,CACID,MAAO,sBACPC,MAAO,mBAEX,CACID,MAAO,qCACPC,MAAO,mBAEX,CACID,MAAO,uBACPC,MAAO,oBAEX,CACID,MAAO,mDACPC,MAAO,kBAEX,CACID,MAAO,qBACPC,MAAO,kBAEX,CACID,MAAO,uBACPC,MAAO,oBAEX,CACID,MAAO,2BACPC,MAAO,oBAEX,CACID,MAAO,uBACPC,MAAO,qBAEX,CACID,MAAO,wBACPC,MAAO,mBAEX,CACID,MAAO,iCACPC,MAAO,mBAEX,CACID,MAAO,2BACPC,MAAO,kCAEX,CACID,MAAO,yBACPC,MAAO,sBAEX,CACID,MAAO,2CACPC,MAAO,aAEX,CACID,MAAO,yBACPC,MAAO,uBAEX,CACID,MAAO,qBACPC,MAAO,mBAEX,CACID,MAAO,yBACPC,MAAO,qBAEX,CACID,MAAO,kCACPC,MAAO,sBAEX,CACID,MAAO,gDACPC,MAAO,iBAEX,CACID,MAAO,yCACPC,MAAO,WAEX,CACID,MAAO,+DACPC,MAAO,iBAEX,CACID,MAAO,kDACPC,MAAO,gBAEX,CACID,MAAO,kCACPC,MAAO,gBAEX,CACID,MAAO,gEACPC,MAAO,mBAEX,CACID,MAAO,+CACPC,MAAO,iBAEX,CACID,MAAO,uBACPC,MAAO,mBAEX,CACID,MAAO,0CACPC,MAAO,mBAEX,CACID,MAAO,4DACPC,MAAO,eAEX,CACID,MAAO,oBACPC,MAAO,gBAEX,CACID,MAAO,uBACPC,MAAO,iBAEX,CACID,MAAO,oBACPC,MAAO,cAEX,CACID,MAAO,+BACPC,MAAO,uBAEX,CACID,MAAO,wBACPC,MAAO,kBAEX,CACID,MAAO,qBACPC,MAAO,eAEX,CACID,MAAO,sBACPC,MAAO,gBAEX,CACID,MAAO,oBACPC,MAAO,gBAEX,CACID,MAAO,6BACPC,MAAO,eAEX,CACID,MAAO,sBACPC,MAAO,kBAEX,CACID,MAAO,qBACPC,MAAO,eAEX,CACID,MAAO,gDACPC,MAAO,iBAEX,CACID,MAAO,sBACPC,MAAO,gBAEX,CACID,MAAO,sBACPC,MAAO,gBAEX,CACID,MAAO,gCACPC,MAAO,cAEX,CACID,MAAO,mBACPC,MAAO,aAEX,CACID,MAAO,yBACPC,MAAO,oBAEX,CACID,MAAO,oBACPC,MAAO,cAEX,CACID,MAAO,uBACPC,MAAO,iBAEX,CACID,MAAO,iCACPC,MAAO,gBAEX,CACID,MAAO,wCACPC,MAAO,gBAEX,CACID,MAAO,kDACPC,MAAO,iBAEX,CACID,MAAO,wBACPC,MAAO,kBAEX,CACID,MAAO,qBACPC,MAAO,eAEX,CACID,MAAO,oBACPC,MAAO,cAEX,CACID,MAAO,4BACPC,MAAO,sBAEX,CACID,MAAO,qBACPC,MAAO,eAEX,CACID,MAAO,sCACPC,MAAO,gBAEX,CACID,MAAO,0BACPC,MAAO,oBAEX,CACID,MAAO,0BACPC,MAAO,oBAEX,CACID,MAAO,0BACPC,MAAO,oBAEX,CACID,MAAO,oDACPC,MAAO,iBAEX,CACID,MAAO,oBACPC,MAAO,mBAEX,CACID,MAAO,sCACPC,MAAO,kBAEX,CACID,MAAO,qBACPC,MAAO,eAEX,CACID,MAAO,sBACPC,MAAO,gBAEX,CACID,MAAO,oBACPC,MAAO,cAEX,CACID,MAAO,oCACPC,MAAO,cAEX,CACID,MAAO,qBACPC,MAAO,oBAEX,CACID,MAAO,uBACPC,MAAO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","file":"static/js/main.f033572b.chunk.js","sourcesContent":["// Timezones collected from this link\n// https://jp.cybozu.help/general/en/admin/list_systemadmin/list_localization/timezone.html\n\nexport const TIMEZONES = [\n    {\n        label: '(UTC-12:00) International Date Line West',\n        value: 'Etc/GMT+12'\n    },\n    {\n        label: '(UTC-11:00) Coordinated Universal Time-11',\n        value: 'Etc/GMT+11'\n    },\n    {\n        label: '(UTC-10:00) Hawaii',\n        value: 'Pacific/Honolulu'\n    },\n    {\n        label: '(UTC-09:00) Alaska',\n        value: 'America/Anchorage'\n    },\n    {\n        label: '(UTC-08:00) Baja California',\n        value: 'America/Santa_Isabel'\n    },\n    {\n        label: '(UTC-08:00) Pacific Time (US and Canada)',\n        value: 'America/Los_Angeles'\n    },\n    {\n        label: '(UTC-07:00) Chihuahua, La Paz, Mazatlan',\n        value: 'America/Chihuahua'\n    },\n    {\n        label: '(UTC-07:00) Arizona',\n        value: 'America/Phoenix'\n    },\n    {\n        label: '(UTC-07:00) Mountain Time (US and Canada)',\n        value: 'America/Denver'\n    },\n    {\n        label: '(UTC-06:00) Central America',\n        value: 'America/Guatemala'\n    },\n    {\n        label: '(UTC-06:00) Central Time (US and Canada)',\n        value: 'America/Chicago'\n    },\n    {\n        label: '(UTC-06:00) Saskatchewan',\n        value: 'America/Regina'\n    },\n    {\n        label: '(UTC-06:00) Guadalajara, Mexico City, Monterey',\n        value: 'America/Mexico_City'\n    },\n    {\n        label: '(UTC-05:00) Bogota, Lima, Quito',\n        value: 'America/Bogota'\n    },\n    {\n        label: '(UTC-05:00) Indiana (East)',\n        value: 'America/Indiana/Indianapolis'\n    },\n    {\n        label: '(UTC-05:00) Eastern Time (US and Canada)',\n        value: 'America/New_York'\n    },\n    {\n        label: '(UTC-04:30) Caracas',\n        value: 'America/Caracas'\n    },\n    {\n        label: '(UTC-04:00) Atlantic Time (Canada)',\n        value: 'America/Halifax'\n    },\n    {\n        label: '(UTC-04:00) Asuncion',\n        value: 'America/Asuncion'\n    },\n    {\n        label: '(UTC-04:00) Georgetown, La Paz, Manaus, San Juan',\n        value: 'America/La_Paz'\n    },\n    {\n        label: '(UTC-04:00) Cuiaba',\n        value: 'America/Cuiaba'\n    },\n    {\n        label: '(UTC-04:00) Santiago',\n        value: 'America/Santiago'\n    },\n    {\n        label: '(UTC-03:30) Newfoundland',\n        value: 'America/St_Johns'\n    },\n    {\n        label: '(UTC-03:00) Brasilia',\n        value: 'America/Sao_Paulo'\n    },\n    {\n        label: '(UTC-03:00) Greenland',\n        value: 'America/Godthab'\n    },\n    {\n        label: '(UTC-03:00) Cayenne, Fortaleza',\n        value: 'America/Cayenne'\n    },\n    {\n        label: '(UTC-03:00) Buenos Aires',\n        value: 'America/Argentina/Buenos_Aires'\n    },\n    {\n        label: '(UTC-03:00) Montevideo',\n        value: 'America/Montevideo'\n    },\n    {\n        label: '(UTC-02:00) Coordinated Universal Time-2',\n        value: 'Etc/GMT+2'\n    },\n    {\n        label: '(UTC-01:00) Cape Verde',\n        value: 'Atlantic/Cape_Verde'\n    },\n    {\n        label: '(UTC-01:00) Azores',\n        value: 'Atlantic/Azores'\n    },\n    {\n        label: '(UTC+00:00) Casablanca',\n        value: 'Africa/Casablanca'\n    },\n    {\n        label: '(UTC+00:00) Monrovia, Reykjavik',\n        value: 'Atlantic/Reykjavik'\n    },\n    {\n        label: '(UTC+00:00) Dublin, Edinburgh, Lisbon, London',\n        value: 'Europe/London'\n    },\n    {\n        label: '(UTC+00:00) Coordinated Universal Time',\n        value: 'Etc/GMT'\n    },\n    {\n        label: '(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',\n        value: 'Europe/Berlin'\n    },\n    {\n        label: '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris',\n        value: 'Europe/Paris'\n    },\n    {\n        label: '(UTC+01:00) West Central Africa',\n        value: 'Africa/Lagos'\n    },\n    {\n        label: '(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague',\n        value: 'Europe/Budapest'\n    },\n    {\n        label: '(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb',\n        value: 'Europe/Warsaw'\n    },\n    {\n        label: '(UTC+01:00) Windhoek',\n        value: 'Africa/Windhoek'\n    },\n    {\n        label: '(UTC+02:00) Athens, Bucharest, Istanbul',\n        value: 'Europe/Istanbul'\n    },\n    {\n        label: '(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius',\n        value: 'Europe/Kiev'\n    },\n    {\n        label: '(UTC+02:00) Cairo',\n        value: 'Africa/Cairo'\n    },\n    {\n        label: '(UTC+02:00) Damascus',\n        value: 'Asia/Damascus'\n    },\n    {\n        label: '(UTC+02:00) Amman',\n        value: 'Asia/Amman'\n    },\n    {\n        label: '(UTC+02:00) Harare, Pretoria',\n        value: 'Africa/Johannesburg'\n    },\n    {\n        label: '(UTC+02:00) Jerusalem',\n        value: 'Asia/Jerusalem'\n    },\n    {\n        label: '(UTC+02:00) Beirut',\n        value: 'Asia/Beirut'\n    },\n    {\n        label: '(UTC+03:00) Baghdad',\n        value: 'Asia/Baghdad'\n    },\n    {\n        label: '(UTC+03:00) Minsk',\n        value: 'Europe/Minsk'\n    },\n    {\n        label: '(UTC+03:00) Kuwait, Riyadh',\n        value: 'Asia/Riyadh'\n    },\n    {\n        label: '(UTC+03:00) Nairobi',\n        value: 'Africa/Nairobi'\n    },\n    {\n        label: '(UTC+03:30) Tehran',\n        value: 'Asia/Tehran'\n    },\n    {\n        label: '(UTC+04:00) Moscow, St. Petersburg, Volgograd',\n        value: 'Europe/Moscow'\n    },\n    {\n        label: '(UTC+04:00) Tbilisi',\n        value: 'Asia/Tbilisi'\n    },\n    {\n        label: '(UTC+04:00) Yerevan',\n        value: 'Asia/Yerevan'\n    },\n    {\n        label: '(UTC+04:00) Abu Dhabi, Muscat',\n        value: 'Asia/Dubai'\n    },\n    {\n        label: '(UTC+04:00) Baku',\n        value: 'Asia/Baku'\n    },\n    {\n        label: '(UTC+04:00) Port Louis',\n        value: 'Indian/Mauritius'\n    },\n    {\n        label: '(UTC+04:30) Kabul',\n        value: 'Asia/Kabul'\n    },\n    {\n        label: '(UTC+05:00) Tashkent',\n        value: 'Asia/Tashkent'\n    },\n    {\n        label: '(UTC+05:00) Islamabad, Karachi',\n        value: 'Asia/Karachi'\n    },\n    {\n        label: '(UTC+05:30) Sri Jayewardenepura Kotte',\n        value: 'Asia/Colombo'\n    },\n    {\n        label: '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi',\n        value: 'Asia/Calcutta'\n    },\n    {\n        label: '(UTC+05:45) Kathmandu',\n        value: 'Asia/Kathmandu'\n    },\n    {\n        label: '(UTC+06:00) Astana',\n        value: 'Asia/Almaty'\n    },\n    {\n        label: '(UTC+06:00) Dhaka',\n        value: 'Asia/Dhaka'\n    },\n    {\n        label: '(UTC+06:00) Yekaterinburg',\n        value: 'Asia/Yekaterinburg'\n    },\n    {\n        label: '(UTC+06:30) Yangon',\n        value: 'Asia/Yangon'\n    },\n    {\n        label: '(UTC+07:00) Bangkok, Hanoi, Jakarta',\n        value: 'Asia/Bangkok'\n    },\n    {\n        label: '(UTC+07:00) Novosibirsk',\n        value: 'Asia/Novosibirsk'\n    },\n    {\n        label: '(UTC+08:00) Krasnoyarsk',\n        value: 'Asia/Krasnoyarsk'\n    },\n    {\n        label: '(UTC+08:00) Ulaanbaatar',\n        value: 'Asia/Ulaanbaatar'\n    },\n    {\n        label: '(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi',\n        value: 'Asia/Shanghai'\n    },\n    {\n        label: '(UTC+08:00) Perth',\n        value: 'Australia/Perth'\n    },\n    {\n        label: '(UTC+08:00) Kuala Lumpur, Singapore',\n        value: 'Asia/Singapore'\n    },\n    {\n        label: '(UTC+08:00) Taipei',\n        value: 'Asia/Taipei'\n    },\n    {\n        label: '(UTC+09:00) Irkutsk',\n        value: 'Asia/Irkutsk'\n    },\n    {\n        label: '(UTC+09:00) Seoul',\n        value: 'Asia/Seoul'\n    },\n    {\n        label: '(UTC+09:00) Osaka, Sapporo, Tokyo',\n        value: 'Asia/Tokyo'\n    },\n    {\n        label: '(UTC+09:30) Darwin',\n        value: 'Australia/Darwin'\n    },\n    {\n        label: '(UTC+09:30) Adelaide',\n        value: 'Australia/Adelaide'\n    },\n    {\n        label: '(UTC+10:00) Hobart',\n        value: 'Australia/Hobart'\n    },\n    {\n        label: '(UTC+10:00) Yakutsk',\n        value: 'Asia/Yakutsk'\n    },\n    {\n        label: '(UTC+10:00) Brisbane',\n        value: 'Australia/Brisbane'\n    },\n    {\n        label: '(UTC+10:00) Guam, Port Moresby',\n        value: 'Pacific/Port_Moresby'\n    },\n    {\n        label: '(UTC+10:00) Canberra, Melbourne, Sydney',\n        value: 'Australia/Sydney'\n    },\n    {\n        label: '(UTC+11:00) Vladivostok',\n        value: 'Asia/Vladivostok'\n    },\n    {\n        label: '(UTC+11:00) Solomon Islands, New Caledonia',\n        value: 'Pacific/Guadalcanal'\n    },\n    {\n        label: '(UTC+12:00) Coordinated Universal Time+12',\n        value: 'Etc/GMT-12'\n    },\n    {\n        label: '(UTC+12:00) Fiji, Marshall Islands',\n        value: 'Pacific/Fiji'\n    },\n    {\n        label: '(UTC+12:00) Magadan',\n        value: 'Asia/Magadan'\n    },\n    {\n        label: '(UTC+12:00) Auckland, Wellington',\n        value: 'Pacific/Auckland'\n    },\n    {\n        label: '(UTC+13:00) Nuku\\'alofa',\n        value: 'Pacific/Tongatapu'\n    },\n    {\n        label: '(UTC+13:00) Samoa',\n        value: 'Pacific/Apia'\n    }\n];","import { useEffect, useRef, useState } from 'react';\nimport momentTimezone from 'moment-timezone';\nimport { annotate } from 'rough-notation';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// @Important :: if your bundler supports tree shaking (webpack >= 2.x, parcel with a flag), \n// use named imports otherwise use default imports\n// Reference :: https://material-ui.com/guides/minimizing-bundle-size/\nimport {\n    Container,\n    Grid,\n    Card,\n    CardContent,\n    CardActions,\n    Typography,\n    CssBaseline,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Button\n} from '@material-ui/core';\n\nimport { TIMEZONES } from './Constants/TimezonesConstant';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    heroContent: {\n        padding: theme.spacing(4),\n    },\n    alignCenter: {\n        textAlign: 'center'\n    },\n    flexAlignCenter: {\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    formControl: {\n        minWidth: '33%',\n        color: '#fff',\n    },\n    redFont: {\n        color: 'red'\n    },\n    blueFont: {\n        color: 'blue'\n    }\n}));\n\nconst App = () => {\n    const [selectedTimezone, setSelectedTimezone] = useState('Pacific/Auckland');\n    const [dateTimeAsPerSelectedTimezone, setDateTimeAsPerSelectedTimezone] = useState('');\n    const [currentDateTS, setCurrentDateTS] = useState(Date.now());\n    const classes = useStyles();\n    const datetimeElementRef = useRef(null);\n\n    const onTimezoneChange = e => {\n        const { value } = e.target;\n        setSelectedTimezone(value);\n    };\n\n    useEffect(() => {\n        // This function converts the given date as per the selected timezone using moment-timezone.js library\n        const getDateTimeAsPerSelectedTimezone = (timestamp, timezone) => {\n            const formattedDT = momentTimezone.tz(timestamp, timezone).format('M/D/YYYY hh:mm:ss A');\n            return formattedDT;\n        };\n\n        if (selectedTimezone) {\n            const dt = getDateTimeAsPerSelectedTimezone(currentDateTS, selectedTimezone);\n            setDateTimeAsPerSelectedTimezone(dt);\n        }\n    }, [currentDateTS, selectedTimezone]);\n\n    // just a design experiment\n    useEffect(() => {\n        let annotation;\n        if (datetimeElementRef && datetimeElementRef.current) {\n            const annotationTypes = ['underline', 'box', 'circle', 'highlight'];\n            // get random annotation type from possible list of types\n            const randomAnnotationType = annotationTypes[Math.floor(Math.random() * annotationTypes.length)]\n            annotation = annotate(datetimeElementRef.current, { type: randomAnnotationType, color: '#FFD54F' });\n            annotation.show();\n        }\n\n        return () => {\n            // clear previous annotation \n            if (annotation) {\n                annotation.remove();\n            }\n        }\n    }, [dateTimeAsPerSelectedTimezone]);\n\n    return (\n        <>\n            <CssBaseline />\n            <main className={classes.root}>\n                <div>\n                    <div className={classes.heroContent}>\n                        <Container maxWidth=\"md\">\n                            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                                React + Moment.js Timezone POC\n                            </Typography>\n                            <Typography variant=\"h6\" align=\"center\" color=\"textPrimary\" paragraph>\n                                This POC demonstrates the usage of \"moment.js + moment-timezone.js\" library along with react.\n                            </Typography>\n                            <ul>\n                                <li>When any dates in your application must be shown according to the user's specified timezones rather than the user's system timezone.</li>\n                                <li>Assume your user is from \"Brisbane, Australia,\" and his or her system's default timezone is \"(UTC + 10:00) Brisbane.\" Let's pretend he or she uses your app, but for whatever reason, he or she wishes to view any dates presented in your app in the \"(UTC + 12:00) Auckland, Wellington\" timezone.</li>\n                                <li>In this scenario, you may use this poc to learn how to display dates based on the user's timezone selection.</li>\n                            </ul>\n                        </Container>\n                    </div>\n                    <Container maxWidth=\"md\">\n                        <Grid container spacing={8}>\n                            <Grid item xs={12} sm={12} md={12} className={classes.flexAlignCenter}>\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel id=\"timezone\">Timezone</InputLabel>\n                                    <Select\n                                        labelId=\"timezone\"\n                                        name=\"selectedTimezone\"\n                                        value={selectedTimezone}\n                                        onChange={onTimezoneChange}\n                                    >\n                                        <MenuItem value=\"\" disabled>Select Timezone</MenuItem>\n                                        {TIMEZONES.map(t => (\n                                            <MenuItem value={t.value} key={t.value}>{t.label}</MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Card>\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h4\" className={classes.alignCenter}>\n                                            Current time as per\n                                            <strong className={classes.redFont}>&nbsp;System's&nbsp;</strong>\n                                            timezone\n                                        </Typography>\n                                        <Typography className={classes.alignCenter}>\n                                            Current Time : {new Date(currentDateTS).toLocaleString('en-US')}\n                                        </Typography>\n\n                                        <ul>\n                                            <li>This time is displayed based on your system's timezone.</li>\n                                            <li>If you change your system's timezone, this time <strong>WILL</strong> change.</li>\n                                            <li>If you change timezone from dropdown, this time <strong>WILL NOT</strong> change.</li>\n                                        </ul>\n                                    </CardContent>\n                                    <CardActions>\n                                        <Button\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            onClick={() => setCurrentDateTS(Date.now())}\n                                        >\n                                            Click here to see updated date value after changing your system's timezone\n                                        </Button>\n                                    </CardActions>\n                                </Card>\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} md={6}>\n                                <Card>\n                                    <CardContent>\n                                        {selectedTimezone && dateTimeAsPerSelectedTimezone ? (\n                                            <>\n                                                <Typography gutterBottom variant=\"h6\" component=\"h4\" className={classes.alignCenter}>\n                                                    Current time as per\n                                                    <strong className={classes.blueFont}>&nbsp;Selected&nbsp;</strong>\n                                                    timezone\n                                                </Typography>\n                                                <Typography className={classes.alignCenter} ref={datetimeElementRef}>\n                                                    Current Time : {dateTimeAsPerSelectedTimezone}\n                                                </Typography>\n\n                                                <ul>\n                                                    <li>This time is displayed based on your selected timezone from the dropdown.</li>\n                                                    <li>If you change timezone from dropdown, this time <strong>WILL</strong> change.</li>\n                                                    <li>If you change your system's timezone, this time <strong>WILL NOT</strong> change.</li>\n                                                </ul>\n                                            </>\n                                        ) : (\n                                                <Typography gutterBottom variant=\"h6\" component=\"h4\" className={classes.alignCenter}>\n                                                    To view the difference, please choose any timezone first.\n                                                </Typography>\n                                            )}\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </div>\n            </main>\n        </>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}